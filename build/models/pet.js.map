{"version":3,"sources":["../../server/models/pet.js"],"names":["petFileName","createPetOwnerId","newPet","ownerId","owner","getOwnerById","id","pets","push","allPets","helper","getNewId","ownerIndex","getIndexById","writeJSONFile","console","log","Error","error","find","r","getAllPetsByOwnerId","p","getPetByPetIdAndOwnerId","length","pet","status","message","err","getPetByIdAndOwnerId","updatePetByIdAndOwnerId","petIndex","deletePetByIdAndOwnerId","deleteById","module","exports"],"mappings":"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","sourcesContent":["import allPets from '../../data/pets.json';\nimport helper from '../helpers/helper';\nconst petFileName = '././data/pets.json';\n\nvar createPetOwnerId = async (newPet, ownerId) => {\n  try {\n    let owner = getOwnerById(ownerId);\n    if (!owner) {\n      let id = { id: 1 };\n      newPet = { ...id, ...newPet };\n      owner = { owner: ownerId, pets: [] };\n      owner.pets.push({ ...id, ...newPet });\n      allPets.push(owner);\n    } else {\n      const id = { id: helper.getNewId(owner.pets) };\n      newPet = { ...id, ...newPet };\n      const ownerIndex = helper.getIndexById(allPets,'owner', ownerId);\n      owner.pets.push(newPet);\n      allPets[ownerIndex].pets = owner.pets;\n    }\n\n    helper.writeJSONFile(petFileName, allPets)\n    return newPet;\n  } catch (err) {\n    console.log(err);\n    throw new Error(error);\n  }\n}\n\nvar getOwnerById = (id) => allPets.find(r => r.owner == id);\nvar getAllPetsByOwnerId = async (id) => allPets.find(p => p.owner == id);\nvar getPetByPetIdAndOwnerId = (id, ownerId) => {\n  try {\n    let owner = allPets.find(r => r.owner == ownerId);\n    if (owner && owner.pets.length) {\n      let pet = owner.pets.find(p => p.id == id);\n      if (!pet) {\n        return { status: 404, message: `No pet found with ${id} id` };\n      } else {\n        return pet;\n      }\n    } else {\n      return { status: 404, message: `No pet found with ${id} id` };\n    }\n  } catch (err) {\n    console.error(err);\n    throw new Error({ status: 500, message: 'Failed to fetch pet' });\n  }\n}\n\nvar getPetByIdAndOwnerId = async (id, ownerId) => getPetByPetIdAndOwnerId(id, ownerId);\n\nvar updatePetByIdAndOwnerId = async (id, ownerId, newPet) => {\n  try {\n    let pet = getPetByPetIdAndOwnerId(id, ownerId);\n    if (pet.id) {\n      const petIndex = helper.getIndexById(getOwnerById(ownerId).pets, 'id', pet.id);\n      const ownerIndex = helper.getIndexById(allPets, 'owner', ownerId);\n\n      id = { id: pet.id }\n      allPets[ownerIndex].pets[petIndex] = { ...id, ...newPet }\n      helper.writeJSONFile(petFileName, allPets)\n      return allPets[ownerIndex].pets[petIndex];\n    }\n\n  } catch (err) {\n    console.error(err);\n    throw new Error({ status: err.status, message: err.message });\n  }\n}\n\nvar deletePetByIdAndOwnerId = async (id, ownerId) => {\n  try {\n    let pet = getPetByPetIdAndOwnerId(id, ownerId);\n\n    if (pet.id) {\n      allPets[helper.getIndexById(allPets, 'owner', ownerId)].pets = helper.deleteById(getOwnerById(ownerId).pets, id);;\n      helper.writeJSONFile(petFileName, allPets);\n      return pet;\n    }\n  } catch (err) {\n    console.error(err);\n    throw new Error({ status: 500, message: `Failed to delete owner.` });\n  }\n}\n\nmodule.exports = {\n  createPetOwnerId,\n  getAllPetsByOwnerId,\n  getPetByIdAndOwnerId,\n  updatePetByIdAndOwnerId,\n  deletePetByIdAndOwnerId\n}"],"file":"pet.js"}