{"version":3,"sources":["../../server/models/owner.js"],"names":["OwnerFileName","petFileName","create","newOwner","id","helper","getNewId","owners","push","writeJSONFile","console","log","Error","error","getOwners","getOwnerById","find","o","updateOwnerById","owner","index","getIndexById","status","message","deleteOwnerById","deleteById","pets","filter","p","parseInt","module","exports"],"mappings":"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","sourcesContent":["import owners from '../../data/owners.json';\nimport pets from '../../data/pets.json';\nimport helper from '../helpers/helper';\nconst OwnerFileName = '././data/owners.json';\nconst petFileName = '././data/pets.json';\n\nvar create = async (newOwner) => {\n  try {\n    const id = { id: helper.getNewId(owners) };\n    newOwner = { ...id, ...newOwner };\n    owners.push(newOwner);\n    helper.writeJSONFile(OwnerFileName, owners);\n    return newOwner;\n  } catch (err) {\n    console.log(err);\n    throw new Error(error);\n  }\n}\n\nvar getOwners = async () => owners;\n// var getOwner = async (id) => owners.find(o => o.id == id);\nvar getOwnerById = async (id) => (owners.find(o => o.id == id) || null );\n// var getOwnerById = async (id) => {\n//   try {\n//     let owner = await getOwner(id);\n//     console.log('Here', owner);\n//     if (!owner) {\n//       console.log('Here if ');\n//       throw new Error({ status: 500, message: `No owner found with ${id} id`});\n//     }\n//     return owner;\n//   } catch (err) {\n//     console.error(err);\n//     throw new Error({ status: 500, message: `Failed to fetch owner` });\n//   }\n// }\n\nvar updateOwnerById = async (owner, newOwner) => {\n  try {\n    const index = helper.getIndexById(owners, 'id', owner.id);\n      let id = { id: owner.id };\n      newOwner = { ...id, ...newOwner };\n      owners[index] = newOwner;\n      helper.writeJSONFile(OwnerFileName, owners);\n    return owners[index];\n  } catch (err) {\n    console.error(err);\n    throw new Error({ status: 500, message: `Failed to fetch owner` });\n  }\n}\n\nvar deleteOwnerById = async (owner) => {\n  try {\n    helper.writeJSONFile(OwnerFileName, helper.deleteById(owners, owner.id));\n    helper.writeJSONFile(petFileName, pets.filter(p => parseInt(p.owner) !== parseInt(owner.id)));\n    return owner;\n  } catch (err) {\n    console.error(err);\n    throw new Error({ status: 500, message: `Failed to delete owner` });\n  }\n}\n\nmodule.exports = {\n  create,\n  getOwners,\n  getOwnerById,\n  updateOwnerById,\n  deleteOwnerById\n}"],"file":"owner.js"}