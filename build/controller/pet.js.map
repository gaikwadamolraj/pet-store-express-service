{"version":3,"sources":["../../server/controller/pet.js"],"names":["Pets","req","res","ownerId","params","errors","isEmpty","status","json","array","body","then","pet","success","message","err","owner","id","pets","petId","console","log"],"mappings":"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","sourcesContent":["import { createPetOwnerId, getPetByIdAndOwnerId, getAllPetsByOwnerId, updatePetByIdAndOwnerId, deletePetByIdAndOwnerId } from '../models/pet';\nimport { validationResult } from 'express-validator';\n\nclass Pets {\n  static createPet(req, res) {\n    let { ownerId } = req.params;\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      res.status(422).json({ errors: errors.array() });\n    }\n    createPetOwnerId(req.body, ownerId)\n      .then((pet) => {\n        res.status(201).json({\n          success: true,\n          message: 'Pet successfully created',\n          pet\n        });\n      })\n      .catch((err) => res.status(500).json({ message: \"Failed to create pet\" }));\n  }\n\n  static async getPets(req, res) {\n    try {\n    let pets = await getAllPetsByOwnerId(req.owner.id);\n      if(pets && pets.owner) {\n        res.status(200).json(pets);\n      } else {\n        res.status(200).json({message: `No pets found for ${req.owner.id} owner id`});\n      }\n    } catch(err) {\n      res.status(500).json({ \"error\": 'Failed to fetch pets' })\n    }\n  }\n\n  static async getPet(req, res) {\n    res.status(200).json(req.pet);\n  }\n\n  static async updatePet(req, res) {\n    let { petId, ownerId } = req.params;\n    let pet =  await updatePetByIdAndOwnerId(petId, ownerId, req.body);\n    if(pet && !pet.status) {\n      res.status(200).json({\n        success: true,\n        message: 'Pet updated sucessfully',\n        pet\n      });\n    } else {\n      res.status(500).json({ \"error\": `Pet not found with ${petId} id` });\n    }\n  }\n\n  static deletePet(req, res) {\n    let { petId, ownerId } = req.params;\n    deletePetByIdAndOwnerId(petId, ownerId)\n    .then((pet) => {\n      res.status(200).json({\n        success: true,\n        message: 'Pet deleted sucessfully',\n        pet\n      });\n    })\n    .catch(err => { console.log(err); res.status(err.status).json({ \"error\": err.message })});\n  }\n\n}\n\nexport default Pets;"],"file":"pet.js"}