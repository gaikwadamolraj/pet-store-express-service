{"version":3,"sources":["../../server/helpers/helper.js"],"names":["fs","require","getNewId","array","length","id","writeJSONFile","filename","content","writeFileSync","JSON","stringify","err","console","log","deleteById","arr","filter","p","parseInt","getIndexById","key","findIndex","o","module","exports"],"mappings":";;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAYA,KAAK,CAACC,MAAN,GAAe,CAAhB,GAAqBD,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAL,CAAwBC,EAAxB,GAA6B,CAAlD,GAAsD,CAAjE;AAAA,CAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,OAAX,EAAuB;AACvCR,EAAAA,EAAE,CAACS,aAAH,CAAiBF,QAAjB,EAA2BG,IAAI,CAACC,SAAL,CAAeH,OAAf,CAA3B,EAAoD,MAApD,EAA4D,UAACI,GAAD,EAAS;AACjE,QAAIA,GAAJ,EAAS;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ,GAJD;AAKH,CAND;;AAQA,IAAIG,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAOX,EAAP;AAAA,SAAcW,GAAG,CAACC,MAAJ,CAAW,UAAAC,CAAC;AAAA,WAAIC,QAAQ,CAACD,CAAC,CAACb,EAAH,CAAR,KAAmBc,QAAQ,CAACd,EAAD,CAA/B;AAAA,GAAZ,CAAd;AAAA,CAAjB;;AACA,IAAIe,YAAY,GAAG,SAAfA,YAAe,CAACJ,GAAD,EAAMK,GAAN,EAAWhB,EAAX;AAAA,SAAkBW,GAAG,CAACM,SAAJ,CAAc,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACF,GAAD,CAAD,IAAUhB,EAAd;AAAA,GAAf,CAAlB;AAAA,CAAnB;;AACAmB,MAAM,CAACC,OAAP,GAAiB;AACbvB,EAAAA,QAAQ,EAARA,QADa;AAEbI,EAAAA,aAAa,EAAbA,aAFa;AAGbS,EAAAA,UAAU,EAAVA,UAHa;AAIbK,EAAAA,YAAY,EAAZA;AAJa,CAAjB","sourcesContent":["const fs = require('fs')\nconst getNewId = (array) => (array.length > 0) ? array[array.length - 1].id + 1 : 1;\n\n// var mustBeInArray = (array, id) => {\n//     return new Promise((resolve, reject) => {\n//         const row = array.find(r => r.id == id)\n//         if (!row) {\n//             reject({\n//                 message: `No data for id ${id}`,\n//                 status: 404\n//             })\n//         }\n//         resolve(row)\n//     })\n// }\n\n// var getPetsByOwnerId = ((array, ownerId) => {\n//     return new Promise((resolve, reject) => {\n//         resolve(array.find(r => r.owner == ownerId))\n//     })\n// });\n// var mustBeInArrayPets = (array, ownerId, id) => {\n//     return new Promise((resolve, reject) => {\n//        getPetsByOwnerId(array, ownerId).then((owner) => {\n//         const row = (owner) ? owner.pets.find(p => p.id == id) : null;\n//         if (!row) {\n//             reject({\n//                 message: `No pets found  with id ${id}`,\n//                 status: 404\n//             })\n//         }\n//         resolve(row)\n//        }).catch(err => reject(err))\n//     })\n// }\n\nvar writeJSONFile = (filename, content) => {\n    fs.writeFileSync(filename, JSON.stringify(content), 'utf8', (err) => {\n        if (err) {\n            console.log(err)\n        }\n    })\n}\n\nvar deleteById = (arr , id) => arr.filter(p => parseInt(p.id) !== parseInt(id));\nvar getIndexById = (arr, key, id) => arr.findIndex(o => o[key] == id);\nmodule.exports = {\n    getNewId,\n    writeJSONFile,\n    deleteById,\n    getIndexById\n}"],"file":"helper.js"}